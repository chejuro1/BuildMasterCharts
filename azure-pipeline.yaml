trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: aws  # AWS credential variables stored in a variable group

stages:
  - stage: CI
    jobs:
      - job: Build
        steps:
          # Step 1: Install AWS CLI
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true

          - script: |
              sudo apt-get update
              sudo apt-get install -y awscli
              sudo apt-get install -y unzip
            displayName: 'Install AWS CLI'

          # Step 2: Configure AWS Credentials using variables from the group
          - script: |
              aws configure set aws_access_key_id $(accesskey)
              aws configure set aws_secret_access_key $(secretkey)
              aws configure set region $(region)
            displayName: 'Configure AWS Credentials'

          # Step 3: Install Helm
          - script: |
              curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            displayName: 'Install Helm'

          - script: |
              helm version --short
            displayName: 'Check Helm Version'

          # Step 4: Install Helm S3 Plugin
          - script: |
              helm plugin install https://github.com/hypnoglow/helm-s3.git
            displayName: 'Install Helm S3 Plugin'

          # Step 5: Retrieve Latest Chart Version from S3 and Increment
          - script: |
              # List the Helm chart packages in S3 bucket and extract the latest version
              latest_chart=$(aws s3 ls s3://chejurhelmchart/Buildmaster/ | grep buildmaster | sort | tail -n 1)
              echo "Latest chart in S3: $latest_chart"
              
              # Extract the current version from the chart filename
              current_version=$(echo $latest_chart | grep -oP '(?<=buildmaster-)[0-9]+\.[0-9]+\.[0-9]+(?=\.tgz)')
              echo "Current version: $current_version"
              
              # Increment the patch version (you can modify this to increment minor or major)
              IFS='.' read -r major minor patch <<< "$current_version"
              new_patch=$((patch+1))
              new_version="$major.$minor.$new_patch"
              # Set variable to be used on the same pipeline job
              echo "##vso[task.setvariable variable=new_version]$new_version"
              echo "New version: $new_version"
              
              # Update Chart.yaml with the new version
              sed -i "s/^version:.*/version: $new_version/" buildmaster/Chart.yaml
              sed -i "s/^version:.*/version: $new_version/" inedo-sql/Chart.yaml
              sed -i "s/^version:.*/version: $new_version/" proget/Chart.yaml
              sed -i "s/^version:.*/version: $new_version/" otter/Chart.yaml
            
              
            displayName: 'Retrieve Latest Chart Version and Increment'

          # Step 6: Initialize and Add S3 Repo
          - script: |
              helm s3 init s3://chejurhelmchart/Buildmaster
              helm repo add Buildmaster s3://chejurhelmchart/Buildmaster
            displayName: 'Initialize and Add Helm Repo'
          
          # Step 7: Create Helm Chart and Push to S3
          - script: |
              printenv
              helm package buildmaster  # Package the Helm chart with updated version
              helm package inedo-sql    # Package the Helm chart with updated version
              helm package proget   # Package the Helm chart with updated version
              helm package otter   # Package the Helm chart with updated version
              echo "Packaging Helm chart with version: $(new_version)"
              newchart=$(echo buildmaster-$(new_version).tgz)
              newchart1=$(echo inedo-sql-$(new_version).tgz)
              newchart2=$(echo proget-$(new_version).tgz)
              newchart3=$(echo otter-$(new_version).tgz)
              echo $newchart
              echo $newchart1
              echo $newchart2
              helm s3 push $newchart Buildmaster  # Push the chart to the S3 Helm repo
              helm s3 push $newchart1 Buildmaster # Push the chart to the S3 Helm repo
              helm s3 push $newchart2 Buildmaster # Push the chart to the S3 Helm repo
              helm s3 push $newchart3 Buildmaster # Push the chart to the S3 Helm repo
            displayName: 'Package and Push Helm Chart'


  - stage: deploy
    jobs:
      - deployment: test
        displayName: 'deploy inedo-sql'
        environment: deploy
      - job: Deploychart
        steps:
          - script: |
              aws configure set aws_access_key_id $(accesskey)
              aws configure set aws_secret_access_key $(secretkey)
              aws configure set region $(region)
              aws eks update-kubeconfig --region us-east-1 --name "education-eks-xhR5scZC"

            displayName: 'login kubernetes cluster '
        # Add  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'Jpo45l..2020' -Q 'CREATE DATABASE Otter COLLATE SQL_Latin1_General_CP1_CI_AS' -C
        # Step 5: Initialize and Add S3 Repo 
        #BuildMaster
        #ProGet
          - script: |
              # Install S3 potocol
              helm plugin install https://github.com/hypnoglow/helm-s3.git
              helm s3 init s3://chejurhelmchart/Buildmaster
              # Deploy the package
              helm repo add Buildmaster s3://chejurhelmchart/Buildmaster
              helm repo update
              helm search repo Buildmaster --versions
              helm upgrade --install buildmaster Buildmaster/buildmaster --version 0.1.47 --namespace default
              #helm upgrade --install inedo-sql Buildmaster/inedo-sql --version 0.1.47 --namespace default
              helm upgrade --install proget Buildmaster/proget --version 0.1.47 --namespace default
              helm upgrade --install otter Buildmaster/otter --version 0.1.47 --namespace default
            displayName: 'Install the chart in kubernetes cluster '


